import React, { useState, useEffect, useCallback } from "react";
import { useNavigate } from "react-router-dom";
import api from "../api/api";
import "./AdminPanel.css";

const AdminPanel = () => {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [newUsername, setNewUsername] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [licenseDays, setLicenseDays] = useState("");
  const [users, setUsers] = useState([]);
  const [status, setStatus] = useState("");
  const [isError, setIsError] = useState(false);
  const [showUsers, setShowUsers] = useState(false);
  const [editLicenseDays, setEditLicenseDays] = useState({});
  const [currentUser, setCurrentUser] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const navigate = useNavigate();

  const token = localStorage.getItem("token");

  const handleStatus = useCallback((message, error = false) => {
    setStatus(message);
    setIsError(error);
  }, []);

  const handleLogout = useCallback(() => {
    localStorage.removeItem("token");
    setCurrentUser(null);
    setUsers([]);
    setShowUsers(false);
    navigate("/login");
  }, [navigate]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const checkAuth = useCallback(async () => {
    if (!token) {
      setIsLoading(false);
      return;
    }

    try {
      const response = await api.get("/users/me", {
        headers: { Authorization: `Bearer ${token}` },
      });
      setCurrentUser(response.data);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", err);
      localStorage.removeItem("token");
      setCurrentUser(null);
    } finally {
      setIsLoading(false);
    }
  }, [token]);

  // –õ–æ–≥–∏–Ω
  const handleLogin = useCallback(
    async (e) => {
      e.preventDefault();
      if (!username || !password) return handleStatus("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è", true);

      try {
        const data = await api.login(username, password);
        localStorage.setItem("token", data.token);

        const userResponse = await api.get("/users/me", {
          headers: { Authorization: `Bearer ${data.token}` },
        });
        setCurrentUser(userResponse.data);
        handleStatus(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userResponse.data.username}!`);
      } catch (err) {
        handleStatus(err.response?.data?.error || "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", true);
        localStorage.removeItem("token");
      }
    },
    [username, password, handleStatus]
  );

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const loadUsers = useCallback(async () => {
    try {
      const response = await api.get("/users", {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (Array.isArray(response.data)) {
        setUsers(response.data);
        setShowUsers(true);
        handleStatus(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${response.data.length} –∏–≥—Ä–æ–∫–æ–≤`);
      } else {
        handleStatus("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", true);
      }
    } catch (err) {
      handleStatus("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤", true);
    }
  }, [token, handleStatus]);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
  const handleAddUser = useCallback(
    async (e) => {
      e.preventDefault();
      if (!newUsername || !newPassword || !licenseDays)
        return handleStatus("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è", true);

      try {
        await api.post(
          "/add-user",
          {
            username: newUsername,
            password: newPassword,
            licenseDays: parseInt(licenseDays),
          },
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );
        handleStatus(`–ò–≥—Ä–æ–∫ ${newUsername} –¥–æ–±–∞–≤–ª–µ–Ω!`);
        setNewUsername("");
        setNewPassword("");
        setLicenseDays("");
        loadUsers();
      } catch (err) {
        handleStatus(err.response?.data?.error || "–û—à–∏–±–∫–∞", true);
      }
    },
    [newUsername, newPassword, licenseDays, token, handleStatus, loadUsers]
  );

  // –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
  const handleDeleteUser = useCallback(
    async (id) => {
      if (!window.confirm("–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞?")) return;
      try {
        await api.delete(`/delete-user/${id}`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        handleStatus("–ò–≥—Ä–æ–∫ —É–¥–∞–ª—ë–Ω");
        loadUsers();
      } catch (err) {
        handleStatus("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", true);
      }
    },
    [token, loadUsers, handleStatus]
  );

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
  const handleUpdateLicense = useCallback(
    async (id) => {
      const days = parseInt(editLicenseDays[id]);
      // if (!days || days < 1) return handleStatus("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π", true);

      try {
        await api.put(
          `/update-license/${id}`,
          { licenseDays: days },
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );
        handleStatus("–°—Ä–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω");
        setEditLicenseDays((prev) => ({ ...prev, [id]: "" }));
        loadUsers();
      } catch (err) {
        handleStatus("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏", true);
      }
    },
    [editLicenseDays, token, loadUsers, handleStatus]
  );

  useEffect(() => {
    checkAuth();
  }, [checkAuth]);

  if (isLoading) return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;

  // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ ‚Üí —Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥–∞
  if (!token || !currentUser) {
    return (
      <form onSubmit={handleLogin} className="login-form">
        <h2>üîê –í—Ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h2>
        <input
          type="text"
          placeholder="–õ–æ–≥–∏–Ω"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
        />
        <input
          type="password"
          placeholder="–ü–∞—Ä–æ–ª—å"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        />
        <button type="submit">–í–æ–π—Ç–∏</button>
        {status && <div className={`status ${isError ? "error" : "success"}`}>{status}</div>}
      </form>
    );
  }

  // üîπ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –∞–¥–º–∏–Ω ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
  if (!currentUser.isAdmin) {
    const now = Date.now();
    const licenseEnd = Number(currentUser.licenseEndDate);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ timestamp –≤ —Å–µ–∫—É–Ω–¥–∞—Ö ‚Üí –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
    const endDate = licenseEnd < 1e12 ? licenseEnd * 1000 : licenseEnd;

    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É
    const diffMs = endDate - now;
    const diffDays = Math.max(0, Math.floor(diffMs / (1000 * 60 * 60 * 24)));

    return (
      <div className="user-dashboard">
        <div className="user-card">
          <h2>üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</h2>
          <div className="user-info-box">
            <p><strong>–õ–æ–≥–∏–Ω:</strong> {currentUser.username}</p>
            <p><strong>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</strong> {new Date(endDate).toLocaleString()}</p>
            <p className={diffMs > 0 ? "status-active" : "status-expired"}>
              <strong>–°—Ç–∞—Ç—É—Å:</strong> {diffMs > 0 ? "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" : "‚õî –ò—Å—Ç–µ–∫–ª–∞"}
            </p>
            <p><strong>–û—Å—Ç–∞–ª–æ—Å—å:</strong> {diffDays} –¥–Ω–µ–π</p>
          </div>
          <button onClick={handleLogout} className="logout-btn">
            üö™ –í—ã–π—Ç–∏
          </button>
        </div>
      </div>
    );
  }



  // üîπ –ï—Å–ª–∏ –∞–¥–º–∏–Ω ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  return (
    <div className="admin-container">
      <div className="admin-panel">
        <div className="header">
          <h2>üéÆ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h2>
          <div className="user-info">
            <span>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {currentUser.username}</span>
            <button onClick={handleLogout} className="logout-btn">
              –í—ã–π—Ç–∏
            </button>
          </div>
        </div>

        <form onSubmit={handleAddUser} className="add-user-form">
          <input
            type="text"
            placeholder="–ù–æ–≤—ã–π –ª–æ–≥–∏–Ω"
            value={newUsername}
            onChange={(e) => setNewUsername(e.target.value)}
          />
          <input
            type="password"
            placeholder="–ü–∞—Ä–æ–ª—å"
            value={newPassword}
            onChange={(e) => setNewPassword(e.target.value)}
          />
          <input
            type="number"
            placeholder="–°—Ä–æ–∫ –ª–∏—Ü–µ–Ω–∑–∏–∏ (–¥–Ω–µ–π)"
            value={licenseDays}
            onChange={(e) => setLicenseDays(e.target.value)}
          />
          <button type="submit" className="add-btn">‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞</button>
        </form>

        <button onClick={loadUsers} className="show-users-btn">
          üìö –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        </button>

        {showUsers && (
          <div className="users-table">
            <h3>üë• –í—Å–µ –∏–≥—Ä–æ–∫–∏</h3>
            {users.length > 0 ? (
              <table>
                <thead>
                  <tr>
                    <th>ID</th>
                    <th>–õ–æ–≥–∏–Ω</th>
                    <th>–õ–∏—Ü–µ–Ω–∑–∏—è</th>
                    <th>–ê–¥–º–∏–Ω</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                  </tr>
                </thead>
                <tbody>
                  {users.map((user) => {
                    const today = new Date();
                    const licenseEnd = user.licenseEndDate ? new Date(user.licenseEndDate) : null;
                    const diffDays = licenseEnd
                      ? Math.ceil((licenseEnd - today) / (1000 * 60 * 60 * 24))
                      : 0;

                    return (
                      <tr key={user.id}>
                        <td>{user.id}</td>
                        <td>{user.username}</td>
                        <td>{diffDays > 0 ? `${diffDays} –¥–Ω–µ–π` : "‚õî –ò—Å—Ç–µ–∫–ª–∞"}</td>
                        <td>{user.isAdmin ? "‚úÖ" : "‚ùå"}</td>
                        <td>
                          <button onClick={() => handleDeleteUser(user.id)} className="delete-btn">
                            üóë –£–¥–∞–ª–∏—Ç—å
                          </button>
                          <input
                            type="number"
                            placeholder="–î–Ω–∏"
                            value={editLicenseDays[user.id] || ""}
                            onChange={(e) =>
                              setEditLicenseDays({
                                ...editLicenseDays,
                                [user.id]: e.target.value,
                              })
                            }
                            style={{ width: "70px", marginLeft: "10px" }}
                          />
                          <button
                            className="update-btn"
                            onClick={() => handleUpdateLicense(user.id)}
                          >
                            üîÑ –û–±–Ω–æ–≤–∏—Ç—å
                          </button>
                        </td>
                      </tr>
                    );
                  })}
                </tbody>
              </table>
            ) : (
              <p>–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
            )}
          </div>
        )}
      </div>
      {status && <div className={`status ${isError ? "error" : "success"}`}>{status}</div>}
    </div>
  );
};

export default AdminPanel;
