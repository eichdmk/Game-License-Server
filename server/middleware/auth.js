import jwt from 'jsonwebtoken';
import { connectDB } from '../db.js';

let db;

export const authenticateToken = async (req, res, next) => {
  try {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });

    jwt.verify(token, process.env.JWT_SECRET, async (err, decoded) => {
      if (err) return res.status(403).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });

      if (!db) db = await connectDB();
      const user = await db.get('SELECT * FROM users WHERE id = ?', [decoded.id]);

      if (!user) {
        return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      // üîí –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—è
      const now = Date.now();
      if (user.licenseEndDate <= now) {
        return res.status(403).json({ error: '–°—Ä–æ–∫ –≤–∞—à–µ–π –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏—Å—Ç—ë–∫. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.' });
      }

      req.user = decoded;
      next();
    });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ authenticateToken:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};
