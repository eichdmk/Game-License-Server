// server.js ‚Äî –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø üöÄ

import 'dotenv/config';
import express from 'express';
import { connectDB } from './db.js';
import { blockIPMiddleware, setDB as setBlockIPDB } from './middleware/blockIP.js';
import { requireAdmin, setDB as setRequireAdminDB } from './middleware/requireAdmin.js';
import { authenticateToken, setDB as setAuthDB } from './middleware/auth.js';

import cors from 'cors';
import rateLimit from 'express-rate-limit';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤
if (!process.env.JWT_SECRET) {
  console.error('–û–®–ò–ë–ö–ê: –ù–µ –∑–∞–¥–∞–Ω JWT_SECRET –≤ .env');
  process.exit(1);
}
if (!process.env.LICENSE_SIGNING_SECRET) {
  console.error('–û–®–ò–ë–ö–ê: –ù–µ –∑–∞–¥–∞–Ω LICENSE_SIGNING_SECRET –≤ .env');
  process.exit(1);
}

const JWT_SECRET = process.env.JWT_SECRET;
const LICENSE_SIGNING_SECRET = process.env.LICENSE_SIGNING_SECRET;
const app = express();

// Middleware
app.use(blockIPMiddleware);
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// –õ–∏–º–∏—Ç–µ—Ä –¥–ª—è /login
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 5,
  message: { error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' },
  standardHeaders: true,
  legacyHeaders: false,
});
app.use('/api/v1/login', limiter);

let db;

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
const cleanupOldLogs = async () => {
  try {
    const oneMonthAgo = Date.now() - 30 * 86400000;
    const result = await db.run(`DELETE FROM login_logs WHERE createdAt < ?`, [oneMonthAgo]);
    console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${result.changes} —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ –≤—Ö–æ–¥–∞`);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤:', err);
  }
};

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ default, –∏ setDependencies –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞
import authRouter, { setDependencies as setAuthDependencies } from './routes/auth.routes.js';
import adminRouter, { setDependencies as setAdminDependencies } from './routes/admin.routes.js';
import exportRouter, { setDependencies as setExportDependencies } from './routes/export.routes.js';

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const startServer = async () => {
  try {
    db = await connectDB();
    if (!db) {
      console.error('‚ùå connectDB() –≤–µ—Ä–Ω—É–ª undefined');
      process.exit(1);
    }
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');

    // –ü–µ—Ä–µ–¥–∞—ë–º db –≤ middleware
    setBlockIPDB(db);
    setAuthDB(db);
    setRequireAdminDB(db);

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞—ë–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ —Ä–æ—É—Ç–µ—Ä—ã —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
    setAuthDependencies(db, JWT_SECRET, LICENSE_SIGNING_SECRET);
    setAdminDependencies(db);
    setExportDependencies(db);

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    app.use('/api/v1', authRouter);
    app.use('/api/v1/admin', adminRouter);
    app.use('/api/v1/export-users', exportRouter);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –ª–æ–≥–æ–≤
    await cleanupOldLogs();
    setInterval(cleanupOldLogs, 24 * 60 * 60 * 1000); // —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏

    // –°—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞
    const PORT = process.env.PORT || 5000;
    app.listen(PORT, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
      console.log(`üåç API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ: http://localhost:${PORT}/api/v1/`);
    });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:', err);
    process.exit(1);
  }
};

startServer();