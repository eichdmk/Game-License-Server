// server.js
import 'dotenv/config';
import express from 'express';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import { connectDB } from './db.js';
import { authenticateToken } from './middleware/auth.js';
import { requireAdmin } from './middleware/requireAdmin.js';
import { blockIPMiddleware } from './middleware/blockIP.js'; // ‚Üê –ù–û–í–´–ô –ò–ú–ü–û–†–¢
import cors from 'cors';
import rateLimit from 'express-rate-limit';
import crypto from "crypto";

// –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT_SECRET
if (!process.env.JWT_SECRET) {
  console.error('–û–®–ò–ë–ö–ê: –ù–µ –∑–∞–¥–∞–Ω JWT_SECRET –≤ .env');
  process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ LICENSE_SIGNING_SECRET
if (!process.env.LICENSE_SIGNING_SECRET) {
  console.error('–û–®–ò–ë–ö–ê: –ù–µ –∑–∞–¥–∞–Ω LICENSE_SIGNING_SECRET –≤ .env');
  process.exit(1);
}

const JWT_SECRET = process.env.JWT_SECRET;
const app = express();

// --- üîê –î–û–ë–ê–í–õ–Ø–ï–ú –ú–ò–î–õ–í–ï–† –î–õ–Ø –ë–õ–û–ö–ò–†–û–í–ö–ò IP (–î–û –í–°–ï–• –ú–ê–†–®–†–£–¢–û–í) ---
app.use(blockIPMiddleware);
// ---------------------------------------------------------------

app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// –õ–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 5,
  message: { error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' },
  standardHeaders: true,
  legacyHeaders: false,
});
app.use('/login', limiter);

function createLicenseSignature(userId, licenseEndDate) {
  const data = `${userId}:${licenseEndDate}`;
  return crypto
    .createHmac("sha256", process.env.LICENSE_SIGNING_SECRET || "default_secret")
    .update(data)
    .digest("hex");
}

let db;

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
const cleanupOldLogs = async () => {
  try {
    const oneMonthAgo = Date.now() - 30 * 86400000;
    const result = await db.run(`DELETE FROM login_logs WHERE createdAt < ?`, [oneMonthAgo]);
    console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${result.changes} —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ –≤—Ö–æ–¥–∞`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤:', err);
  }
};

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const startServer = async () => {
  try {
    db = await connectDB();
    if (!db) {
      console.error('connectDB() –≤–µ—Ä–Ω—É–ª undefined');
      process.exit(1);
    }
    console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');

    await cleanupOldLogs();
    setInterval(cleanupOldLogs, 24 * 60 * 60 * 1000); 

    const PORT = process.env.PORT || 5000;
    app.listen(PORT, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:', err);
    process.exit(1);
  }
};

startServer();

// --- üîí –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø IP-–ë–õ–û–ö–ò–†–û–í–ö–ê–ú–ò (–¢–û–õ–¨–ö–û –î–õ–Ø –ê–î–ú–ò–ù–ê) ---

// –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å IP
app.post('/admin/block-ip', authenticateToken, requireAdmin, async (req, res) => {
  const { ip, reason, days } = req.body;

  if (!ip) {
    return res.status(400).json({ error: 'IP –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
  }

  const expiresAt = days ? Date.now() + days * 86400000 : null;

  try {
    await db.run(
      `INSERT OR REPLACE INTO blocked_ips (ip, reason, blockedAt, expiresAt) VALUES (?, ?, ?, ?)`,
      [ip, reason || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞', Date.now(), expiresAt]
    );

    console.log(`–ê–¥–º–∏–Ω ${req.user.email} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª IP: ${ip}`);
    res.json({ success: true, message: `IP ${ip} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω` });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IP:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å IP
app.delete('/admin/unblock-ip/:ip', authenticateToken, requireAdmin, async (req, res) => {
  const ip = decodeURIComponent(req.params.ip);

  try {
    const result = await db.run(`DELETE FROM blocked_ips WHERE ip = ?`, [ip]);
    if (result.changes === 0) {
      return res.status(404).json({ error: 'IP –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ' });
    }
    res.json({ success: true, message: `IP ${ip} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω` });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IP:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö IP
app.get('/admin/blocked-ips', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const blocked = await db.all(`SELECT * FROM blocked_ips ORDER BY blockedAt DESC`);
    res.json(blocked);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ IP:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (CSV)
app.get('/export-users', authenticateToken, requireAdmin, async (req, res) => {
  const format = req.query.format || 'csv';
  
  try {
    const users = await db.all(`
      SELECT 
        id, 
        firstName, 
        lastName, 
        phone, 
        email, 
        licenseEndDate,
        CASE 
          WHEN licenseEndDate > ? THEN 'active' 
          ELSE 'expired' 
        END as status
      FROM users
    `, [Date.now()]);

    if (format === 'csv') {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV
      const csv = [
        ['ID', '–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–¢–µ–ª–µ—Ñ–æ–Ω', 'Email', '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è', '–°—Ç–∞—Ç—É—Å'].join(','),
        ...users.map(u => [
          u.id,
          `"${u.firstName}"`,
          `"${u.lastName}"`,
          `"${u.phone || ''}"`,
          `"${u.email}"`,
          `"${new Date(u.licenseEndDate).toLocaleDateString()}"`,
          u.status
        ].join(','))
      ].join('\n');

      res.header('Content-Type', 'text/csv');
      res.header('Content-Disposition', 'attachment; filename=users_export.csv');
      res.send(csv);
    } 
    else if (format === 'json') {
      res.json(users);
    } 
    else {
      res.status(400).json({ error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç' });
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// --- üõ° –í–•–û–î –ò –í–´–î–ê–ß–ê –î–ê–ù–ù–´–• –î–õ–Ø –û–§–§–õ–ê–ô–ù-–†–ï–ñ–ò–ú–ê ---
app.post('/login', async (req, res) => {
  const ip = req.headers['x-forwarded-for'] || req.socket.remoteAddress || null;
  const userAgent = req.headers['user-agent'];
  const { email, password } = req.body;

  const logAttempt = async (success, userId = null) => {
    try {
      await db.run(
        `INSERT INTO login_logs (userId, email, ip, success, userAgent, createdAt) VALUES (?, ?, ?, ?, ?, ?)`,
        [userId, email, ip, success ? 1 : 0, userAgent, Date.now()]
      );
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ –≤—Ö–æ–¥–∞:', err);
    }
  };

  try {
    if (!db) return res.status(500).json({ error: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞' });
    if (!email || !password) {
      await logAttempt(false);
      return res.status(400).json({ error: '–í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å' });
    }

    console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', email, '—Å IP:', ip);

    const user = await db.get('SELECT * FROM users WHERE email = ?', [email]);
    if (!user) {
      await logAttempt(false);
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }

    const valid = await bcrypt.compare(password, user.password);
    if (!valid) {
      await logAttempt(false, user.id);
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }

    const now = Date.now();
    if (user.licenseEndDate <= now) {
      await logAttempt(false, user.id);
      return res.status(403).json({ 
        error: '–°—Ä–æ–∫ –≤–∞—à–µ–π –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏—Å—Ç—ë–∫. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.' 
      });
    }

    await logAttempt(true, user.id);

    const token = jwt.sign(
      { id: user.id, email: user.email, isAdmin: user.isAdmin },
      JWT_SECRET,
      { expiresIn: '7d' }
    );

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞
    const licenseData = {
      userId: user.id,
      email: user.email,
      licenseEndDate: user.licenseEndDate,
      issuedAt: now
    };

    const signature = createLicenseSignature(user.id, user.licenseEndDate);

    res.json({
      token,
      user: {
        firstName: user.firstName,
        lastName: user.lastName,
        email: user.email,
        phone: user.phone,
        isAdmin: !!user.isAdmin,
        licenseLeftDays: Math.ceil((user.licenseEndDate - now) / 86400000)
      },
      offlineLicense: licenseData,
      licenseSignature: signature
    });
  } catch (err) {
    await logAttempt(false);
    console.error('–û—à–∏–±–∫–∞ –≤ /login:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

//  –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç (—Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω) ---
app.get('/users/me', authenticateToken, async (req, res) => {
  try {
    const user = await db.get(
      'SELECT id, firstName, lastName, email, phone, isAdmin, licenseEndDate FROM users WHERE id = ?',
      [req.user.id]
    );
    if (!user) return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    const now = Date.now();
    const licenseLeftSeconds = Math.max(0, Math.floor((user.licenseEndDate - now) / 1000));
    const licenseLeftDays = Math.ceil(licenseLeftSeconds / 86400);

    const licenseData = {
      userId: user.id,
      email: user.email,
      licenseEndDate: user.licenseEndDate,
      issuedAt: now
    };

    const signature = createLicenseSignature(user.id, user.licenseEndDate);

    res.json({
      id: user.id,
      firstName: user.firstName,
      lastName: user.lastName,
      email: user.email,
      phone: user.phone,
      isAdmin: !!user.isAdmin,
      licenseEndDate: user.licenseEndDate,
      licenseLeftSeconds,
      licenseLeftDays,
      offlineLicense: licenseData,
      licenseSignature: signature
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ /users/me:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

//  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ñ—Ñ–ª–∞–π–Ω-–¥–∞–Ω–Ω—ã—Ö) 
app.get('/check-license', authenticateToken, async (req, res) => {
  try {
    const user = await db.get(
      'SELECT id, email, licenseEndDate FROM users WHERE id = ?',
      [req.user.id]
    );

    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const now = Date.now();
    const isActive = user.licenseEndDate > now;

    const licenseData = {
      userId: user.id,
      email: user.email,
      licenseEndDate: user.licenseEndDate,
      issuedAt: now
    };

    const signature = createLicenseSignature(user.id, user.licenseEndDate);

    res.json({
      isActive,
      daysLeft: isActive ? Math.ceil((user.licenseEndDate - now) / 86400000) : 0,
      licenseEndDate: user.licenseEndDate,
      offlineLicense: licenseData,
      licenseSignature: signature
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ /check-license:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});


// –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
app.get("/users", authenticateToken, requireAdmin, async (req, res) => {
  try {
    const users = await db.all(`
      SELECT id, firstName, lastName, phone, email, licenseEndDate, isAdmin 
      FROM users
    `);
    const formatted = users.map(u => ({
      ...u,
      licenseDays: Math.max(0, Math.ceil((u.licenseEndDate - Date.now()) / 86400000))
    }));
    res.json(formatted);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ /users:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post("/add-user", authenticateToken, requireAdmin, async (req, res) => {
  try {
    const { firstName, lastName, phone, email, password, licenseDays } = req.body;
    if (!firstName || !lastName || !email || !password || !licenseDays) {
      return res.status(400).json({ error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' });
    }

    const days = parseInt(licenseDays);
    if (isNaN(days) || days <= 0) {
      return res.status(400).json({ error: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º' });
    }

    const existing = await db.get('SELECT * FROM users WHERE email = ?', [email]);
    if (existing) return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });

    const hashed = await bcrypt.hash(password, 10);
    const licenseEndDate = Date.now() + days * 86400000;

    await db.run(
      `INSERT INTO users (firstName, lastName, phone, email, password, licenseEndDate) VALUES (?, ?, ?, ?, ?, ?)`,
      [firstName, lastName, phone, email, hashed, licenseEndDate]
    );

    console.log(`–ê–¥–º–∏–Ω ${req.user.email} –¥–æ–±–∞–≤–∏–ª: ${email}`);
    res.json({ success: true, message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${firstName} –¥–æ–±–∞–≤–ª–µ–Ω` });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ /add-user:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.delete("/delete-user/:id", authenticateToken, requireAdmin, async (req, res) => {
  try {
    const id = parseInt(req.params.id);
    if (isNaN(id) || id <= 0) {
      return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID' });
    }
    const result = await db.run(`DELETE FROM users WHERE id = ?`, [id]);
    if (result.changes === 0) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    res.json({ success: true, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ /delete-user:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é
app.put("/update-license/:id", authenticateToken, requireAdmin, async (req, res) => {
  try {
    const id = parseInt(req.params.id);
    if (isNaN(id) || id <= 0) {
      return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID' });
    }
    const { licenseDays } = req.body;
    const days = parseInt(licenseDays);
    if (isNaN(days) || days < 0) {
      return res.status(400).json({ error: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º' });
    }
    const newDate = Date.now() + days * 86400000;
    const result = await db.run(`UPDATE users SET licenseEndDate = ? WHERE id = ?`, [newDate, id]);
    if (result.changes === 0) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    res.json({ success: true, message: '–°—Ä–æ–∫ –ª–∏—Ü–µ–Ω–∑–∏–∏ –æ–±–Ω–æ–≤–ª—ë–Ω' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ /update-license:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ö–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + –ª–æ–≥–∏
app.get('/users/:id', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const id = parseInt(req.params.id);
    if (isNaN(id) || id <= 0) {
      return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID' });
    }
    const user = await db.get(
      `SELECT id, firstName, lastName, phone, email, licenseEndDate, isAdmin FROM users WHERE id = ?`,
      [id]
    );
    if (!user) return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    const logs = await db.all(
      `SELECT id, email, ip, success, userAgent, createdAt FROM login_logs WHERE userId = ? ORDER BY createdAt DESC LIMIT 50`,
      [id]
    );

    const formattedLogs = logs.map(log => ({
      ...log,
      createdAt: new Date(log.createdAt).toLocaleString(),
      success: log.success === 1
    }));

    res.json({
      ...user,
      licenseDays: Math.max(0, Math.ceil((user.licenseEndDate - Date.now()) / 86400000)),
      logs: formattedLogs
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ /users/:id:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–∏—Ü–µ–Ω–∑–∏—è–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
app.get('/license-stats', authenticateToken, requireAdmin, async (req, res) => {
  try {
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalUsers = await db.get('SELECT COUNT(*) as count FROM users');
    const activeUsers = await db.get(`
      SELECT COUNT(*) as count 
      FROM users 
      WHERE licenseEndDate > ?
    `, [Date.now()]);
    
    const expiredUsers = await db.get(`
      SELECT COUNT(*) as count 
      FROM users 
      WHERE licenseEndDate <= ?
    `, [Date.now()]);
    
    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º
    const licenseDistribution = await db.all(`
      SELECT 
        CASE 
          WHEN licenseEndDate - ? < 86400000 THEN 'less_1d'
          WHEN licenseEndDate - ? < 3 * 86400000 THEN '1-3d'
          WHEN licenseEndDate - ? < 7 * 86400000 THEN '3-7d'
          WHEN licenseEndDate - ? < 30 * 86400000 THEN '7-30d'
          ELSE 'more_30d'
        END as period,
        COUNT(*) as count
      FROM users
      WHERE licenseEndDate > ?
      GROUP BY period
    `, [Date.now(), Date.now(), Date.now(), Date.now(), Date.now()]);

    // –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
    const newUsersLastWeek = await db.get(`
      SELECT COUNT(*) as count 
      FROM users 
      WHERE licenseEndDate > ?
    `, [Date.now() - 7 * 86400000]);

    // –°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ –ª–∏—Ü–µ–Ω–∑–∏–∏
    const avgLicenseDays = await db.get(`
      SELECT AVG((licenseEndDate - ?) / 86400000) as avgDays 
      FROM users 
      WHERE licenseEndDate > ?
    `, [Date.now(), Date.now()]);

    // –ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç—Ç–æ–∫–∞
    const expiringSoon = await db.get(`
      SELECT COUNT(*) as count 
      FROM users 
      WHERE licenseEndDate BETWEEN ? AND ?
    `, [Date.now(), Date.now() + 3 * 86400000]);

    res.json({
      total: totalUsers.count,
      active: activeUsers.count,
      expired: expiredUsers.count,
      distribution: licenseDistribution.reduce((acc, item) => {
        acc[item.period] = item.count;
        return acc;
      }, {}),
      newUsersLastWeek: newUsersLastWeek.count,
      avgLicenseDays: avgLicenseDays.avgDays || 0,
      expiringSoon: expiringSoon.count
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ /license-stats:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –í—Å–µ –ª–æ–≥–∏ –≤—Ö–æ–¥–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
app.get('/login-logs', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const logs = await db.all(`
      SELECT 
        ll.id, ll.email, ll.ip, ll.success, ll.userAgent, ll.createdAt,
        u.firstName, u.lastName
      FROM login_logs ll
      LEFT JOIN users u ON ll.userId = u.id
      ORDER BY ll.createdAt DESC
      LIMIT 100
    `);

    const formatted = logs.map(log => ({
      ...log,
      createdAt: new Date(log.createdAt).toLocaleString(),
      success: log.success === 1
    }));

    res.json(formatted);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ /login-logs:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});